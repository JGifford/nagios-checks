#!/bin/bash

PROGNAME=$(basename $0)
RELEASE="Revision 0.8"

#################################################
## To-do list
##
# check if WARNING is zero (CRITICAL, too?)
#################################################

print_release() {
    echo "$RELEASE"
    exit ${E_UNKNOWN}

}
print_usage() {
    echo "Usage: $PROGNAME -w warning -c critical "
    echo "Return Nagios-compatible check on FlexLM feature expiration dates"
    echo ""
    echo "Mandatory arguments:"
    echo "  -w WARNING              WARN when within this number of days of expiration"
    echo "                          an integer, i.e., 60 is 60 days"
    echo "                          Assumes 11:59:59 of that date"
    echo "                          WARNING should be greater than CRITICAL"
    echo "                          WARNING (and CRITICAL) shouldn't ever be zero (0)"
    echo ""
    echo "  -c CRITICAL             CRIT when within this number of days of expiration"
    echo "                          an integer, i.e., 30 is 30 days"
    echo "                          Assumes 11:59:59 of that date"
    echo "                          CRITICAL should be less than WARNING"
    echo ""
    echo "  -f                      the FlexLM feature being checked"
    echo "                          example: abaqus"
    echo ""
    echo "Exit status:"
    echo "  0  if OK/Success"
    echo "  1  if WARNING"
    echo "  2  if CRITICAL"
    echo "  3  if UNKNOWN"
    echo ""
    exit ${E_UNKNOWN}
}

while getopts "f:w:c:huv" option
do
  case $option in
      f) feature=$OPTARG ;;
      w) warning_days=$OPTARG ;;
      c) critical_days=$OPTARG ;;
      h) print_usage
	  exit ${E_UNKNOWN} ;;
      u) print_usage
	  exit ${E_UNKNOWN} ;;
      v) print_release
	  exit ${E_UNKNOWN} ;;
      *) exit ${E_UNKNOWN} ;;
  esac
done


E_SUCCESS="0"
E_WARNING="1"
E_CRITICAL="2"
E_UNKNOWN="3"

###############################
# If not enough switches
###############################
if [ -z "$warning_days" ]
then
    echo "UNKNOWN - missing -w WARNING"
    exit ${E_UNKNOWN}
elif [ -z "$critical_days" ]
then
    echo "UNKNOWN - missing -c CRITICAL"
    exit ${E_UNKNOWN}
elif [ -z "$feature" ]
then
    echo "UNKNOWN - missing -f FEATURE"
    exit ${E_UNKNOWN}
fi   
###############################
# check if -c is greater than -w
###############################
if [ $warning_days -lt $critical_days ]
then
    echo "UNKNOWN - WARNING ($warning_days) is less than CRITICAL ($critical_days)"
    exit ${E_UNKNOWN}
fi   
