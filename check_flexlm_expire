#!/bin/bash

# ---------------------------------------------------------
# Settings that might be useful to change
#DEBUG="true"
LMUTIL="/cm/shared/apps/FLEXlm/11_13_0_0/bin/lmutil"
# That's all, stop editing!
# ---------------------------------------------------------

PROGNAME=$(basename $0)
RELEASE="Revision 0.8"

#################################################
## To-do list
##
# check if WARNING is zero (CRITICAL, too?)
#################################################

[ -n "$DEBUG" ] && echo "DEBUG is turned on"

#############################
# Standard Nagios exit values
E_SUCCESS="0"
E_WARNING="1"
E_CRITICAL="2"
E_UNKNOWN="3"
#############################

print_release() {
    echo "$RELEASE"
    exit ${E_UNKNOWN}

}
print_usage() {
    echo "Usage: $PROGNAME -w warning -c critical -s PORT@SERVER -f FEATURE"
    echo "Return Nagios-compatible check on FlexLM feature expiration dates"
    echo ""
    echo "Note: Requires \"FlexLM's lmutil\" toolkit..."
    echo ""
    echo "Mandatory arguments:"
    echo "  -w WARNING              WARN when within this number of days of expiration"
    echo "                          an integer, i.e., 60 is 60 days"
    echo "                          Assumes 11:59:59 of that date"
    echo "                          WARNING should be greater than CRITICAL"
    echo "                          WARNING (and CRITICAL) shouldn't ever be zero (0)"
    echo ""
    echo "  -c CRITICAL             CRIT when within this number of days of expiration"
    echo "                          an integer, i.e., 30 is 30 days"
    echo "                          Assumes 11:59:59 of that date"
    echo "                          CRITICAL should be less than WARNING"
    echo ""
    echo "  -f FEATURE              the FlexLM feature being checked"
    echo "                          example: abaqus"
    echo ""
    echo "  -s PORT@SERVER          port (integer) and server (IP or FQDN) where"
    echo "                          the license manager may be contacted."
    echo ""
    echo "Exit status:"
    echo "  0  if OK/Success"
    echo "  1  if WARNING"
    echo "  2  if CRITICAL"
    echo "  3  if UNKNOWN"
    echo ""
    exit ${E_UNKNOWN}
}

while getopts "f:w:s:c:huv" option
do
  case $option in
      f) feature=$OPTARG ;;
      s) port_server=$OPTARG ;;
      w) warning_days=$OPTARG ;;
      c) critical_days=$OPTARG ;;
      h) print_usage
	  exit ${E_UNKNOWN} ;;
      u) print_usage
	  exit ${E_UNKNOWN} ;;
      v) print_release
	  exit ${E_UNKNOWN} ;;
      *) exit ${E_UNKNOWN} ;;
  esac
done

###############################
# If not enough switches
###############################
if [ -z "$port_server" ]
then
    echo "UNKNOWN - missing -s PORT@SERVER"
    exit ${E_UNKNOWN}
elif [ -z "$warning_days" ]
then
    echo "UNKNOWN - missing -w WARNING"
    exit ${E_UNKNOWN}
elif [ -z "$critical_days" ]
then
    echo "UNKNOWN - missing -c CRITICAL"
    exit ${E_UNKNOWN}
elif [ -z "$feature" ]
then
    echo "UNKNOWN - missing -f FEATURE"
    exit ${E_UNKNOWN}
fi   

###############################
# Check if -c & -w are integers
###############################
! [[ $warning_days  =~ ^[0-9]+$ ]] && echo "UNKNOWN: -w is not an integer" && exit ${E_UNKNOWN}
! [[ $critical_days =~ ^[0-9]+$ ]] && echo "UNKNOWN: -c is not an integer" && exit ${E_UNKNOWN}

###############################
# check if -c is greater than -w
###############################
if [ $warning_days -lt $critical_days ]
then
    echo "UNKNOWN - WARNING ($warning_days) is less than CRITICAL ($critical_days)"
    exit ${E_UNKNOWN}
fi

###############################
# Find the "expiry" date of FEATURE
###############################
[ -n "$DEBUG" ] && echo ""
[ -n "$DEBUG" ] && echo "Port Server: "$port_server
[ -n "$DEBUG" ] && echo "Feature:     "$feature
feature_expiry_date=`$LMUTIL lmdiag -n -c $port_server | grep expiry | grep "\""$feature"\"" | awk '{ print $6}'`
# Uses LMUTIL to perform a "lmdiag" command
# -n makes it run in non-interactive mode
# -c is the license file or the port@server
# We're looking for the word "expiry"
# We're looking for the FEATURE (wrapped up in double-quotes)
# We only want the 6th field (the expiry date)
response=$? # to catch command exit (i.e., if the lmutil fails or succeeds)
[ -n "$DEBUG" ] && echo ""
[ -n "$DEBUG" ] && echo "Feature \"expiry\" date: " $feature_expiry_date
[ -n "$DEBUG" ] && echo "Response:                " $response

###############################
# If lmutil returns an error
###############################
if [ "$response" -ne 0 ]
then
    echo "UNKNOWN - lmutil returned error: $response"
    exit ${E_UNKNOWN}
fi
###############################
# If lmutil returns but bad data
###############################
if [ -z "$feature_expiry_date" ]
then
   echo "UNKNOWN - lmutil output not recognized"
   exit ${E_UNKNOWN}
else
    flexlm_date=$feature_expiry_date
    # Should we check to see if
    # this is a date or not?
fi

###############################
# Special case: forever
###############################
if [ "$flexlm_date" = "1-jan-0" ]
then
    # Licensed forever
    echo "OK: perpetual license ($flexlm_date)"
    exit ${E_SUCCESS}
fi

###############################
# do some date calcs
###############################
# Assuming the license feature expires at midnight
date_suffix="23:59:59"
date_expire=$flexlm_date" "$date_suffix
date_today=$(/bin/date "+%d-%b-%Y")" "$date_suffix
seconds_in_day=86400

# Should we have some error checking?
# If this math breaks for some reason?
seconds_in_warn=$(($warning_days  * $seconds_in_day))
seconds_in_crit=$(($critical_days * $seconds_in_day))

# Get the seconds for expire and for today (since the Epoch)
# Below works on CentOS 6.5, etc. (GNU coreutils 8.4)
epoch_expire=$(/bin/date -d "$date_expire" "+%s")
epoch_today=$(/bin/date  -d "$date_today"  "+%s")
# Below works on Mac OSX
#epoch_expire=$(/bin/date -j -f "%d-%b-%Y %H:%M:%S" "$date_expire" "+%s")
#epoch_today=$(/bin/date  -j -f "%d-%b-%Y %H:%M:%S" "$date_today"  "+%s")

[ -n "$DEBUG" ] && echo ""
[ -n "$DEBUG" ] && echo "date  expire: " $date_expire
[ -n "$DEBUG" ] && echo "epoch expire: " $epoch_expire
[ -n "$DEBUG" ] && echo "date  today:  " $date_today
[ -n "$DEBUG" ] && echo "epoch today:  " $epoch_today

# Determine the difference between expiration and today
difference=$(($epoch_expire - $epoch_today))

[ -n "$DEBUG" ] && echo ""
[ -n "$DEBUG" ] && echo "seconds in CRIT days: " $seconds_in_crit
[ -n "$DEBUG" ] && echo "seconds in WARN days: " $seconds_in_warn
[ -n "$DEBUG" ] && echo "seconds remaining:    " $difference

days_remaining=$(($difference / $seconds_in_day))

[ -n "$DEBUG" ] && echo ""
if [ "$difference" -lt "$seconds_in_crit" ]
then
    echo "CRITICAL: less than "$critical_days" days ("$days_remaining" days remaining)"
    exit ${E_CRITICAL}
else
    if [ "$difference" -lt "$seconds_in_warn" ]
    then
	echo "WARNING: less than "$warning_days" days ("$days_remaining" days remaining)"
	exit ${E_WARNING}
    else
	echo "OK: everything is fine ("$days_remaining" days remaining)"
	exit ${E_SUCCESS}
    fi
fi
# If we get to here, not sure what's happening
exit ${E_UNKNOWN}
